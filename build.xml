<project name="jsr166" default="usage">

  <description>
    Build file for JSR-166

    JUnit 3.8 or better must be in ${ant.home}/lib for the test target to work.
  </description>


  <target name="usage" description="Prints this message">
    <echo>
ant [target], where target is one of:

 usage       (default) Prints this message
 compile     Compiles all sources to build folder
 jar         Builds library jar from compiled sources
 test        Runs all tests (requires JUnit 1.8 in ${ant.home}/lib)
 docs        Builds javadocs with custom tags to build folder
 dist-docs   Builds javadocs without custom tags to dist folder
 dist        Puts all distributable products in single hierarchy

 clean       Removes all build products
 dist-clean  Removes all build and distribution products

 checkstyle  Reports on style errors in Java source (verbose, mostly chaff)
 doccheck    Reports on javadoc style errors (not working yet)
    </echo>
  </target>

  <!-- User-specific settings -->
  <property file="user.properties"/>

  <!-- Set build.warnings in user.properties to turn on -warnunchecked -->
  <!-- <property name="build.warnings" value=""/> -->


  <!-- Compilation options -->
  <property name="build.sourcelevel"    value="1.5"/>
  <property name="build.docsourcelevel" value="1.4"/>
  <property name="build.debug"          value="true"/>
  <property name="build.debuglevel"     value="source,lines,vars"/>
  <property name="build.deprecation"    value="false"/>

  <!-- Build locations -->
  <property name="build.dir"            location="build"/>
  <property name="build.classes.dir"    location="${build.dir}/classes"/>
  <property name="build.emulation.dir"  location="${build.dir}/emulation"/>
  <property name="build.testcases.dir"  location="${build.dir}/testcases"/>
  <property name="build.lib.dir"        location="${build.dir}/lib"/>
  <property name="build.ant.dir"        location="${build.dir}/ant"/>
  <property name="build.javadocs.dir"   location="${build.dir}/javadocs"/>
  <property name="build.stripped.dir"   location="${build.dir}/stripped"/>
  <property name="build.reports.dir"    location="${build.dir}/reports"/>
  <property name="build.doccheck.dir"   location="${build.dir}/doccheck"/>
  <property name="build.filter.src.dir" location="${build.dir}/filtersrc"/>

  <!-- Source locations -->
  <property name="src.dir"              location="${basedir}/src/main"/>
  <property name="emulation.src.dir"    location="${basedir}/src/emulation"/>
  <property name="test.src.dir"         location="${basedir}/src/test"/>
  <property name="ant.src.dir"          location="${basedir}/etc/ant"/>
  <property name="stylesheet.dir"       location="${basedir}/etc/xsl"/>
  <property name="lib.dir"              location="${basedir}/lib"/>
  <property name="dist.dir"             location="${basedir}/dist"/>

  <!-- Distribution locations -->
  <property name="dist.javadocs.dir"    location="${dist.dir}/docs"/>

  <!-- Jar locations -->
  <property name="product.jar"          location="${build.lib.dir}/jsr166.jar"/>
  <property name="javac.jar"            location="${lib.dir}/javac.jar"/>
  <property name="collect.jar"          location="${lib.dir}/collect.jar"/>
  <property name="junit.jar"            location="${lib.dir}/junit.jar"/>
  <property name="rt.jar"               location="${java.home}/lib/rt.jar"/>


  <!--
   ! Bootclasspath munging for source compilation.
   -->

  <path id="javac.bootclasspath.prepend">
    <!-- <pathelement location="${src.dir}"/> -->
    <pathelement location="${javac.jar}"/>
  </path>

  <path id="javac.bootclasspath">
    <!-- <pathelement location="${src.dir}"/> -->
    <pathelement location="${collect.jar}"/>
    <pathelement location="${rt.jar}"/>
  </path>

  <!-- Flatten bootclasspath prefix into a platform-appropriate string -->
  <property name="javac.bootclasspath.prepend" refid="javac.bootclasspath.prepend"/>

  <!-- Turn the flattened bootclasspath prefix into a javac argument -->
  <property name="javac.args" value='-J-Xbootclasspath/p:${javac.bootclasspath.prepend}'/>


  <!--
   ! Bootclasspath munging for testing, so JUnit can test our local
   ! modifications to java.*.
   -->

  <path id="test.classpath">
    <pathelement location="${product.jar}"/>
    <pathelement location="${build.testcases.dir}"/>
    <pathelement location="${junit.jar}"/>
  </path>

  <!-- Flatten test classpath into a platform-appropriate string -->
  <property name="test.classpath" refid="test.classpath"/>

  <!-- Turn the flattened test classpath into a javac argument -->
  <property name="test.javac.args" value='-Xbootclasspath/p:${test.classpath}'/>



  <!-- Main targets -->

  <target name="compile" depends="init"
          description="Compiles main sources to build folder">

    <mkdir dir="${build.classes.dir}"/>

    <javac srcdir="${src.dir}"
          destdir="${build.classes.dir}"
            debug="${build.debug}"
       debuglevel="${build.debuglevel}"
      deprecation="${build.deprecation}"
           source="${build.sourcelevel}"
             fork="true">

      <bootclasspath refid="javac.bootclasspath"/>
      <compilerarg line="${javac.args} ${build.warnings.option}"/>

    </javac>

  </target>


  <target name="jar" depends="native-jar, emulation-jar"/>


  <target name="test" depends="init, check-junit, report-tests"
          description="Runs all tests (requires JUnit 3.8+ in ${ant.home}/lib)"
  />


  <target name="checkstyle" depends="filter-src"
          description="Reports on style errors in Java source (verbose, mostly chaff)">

    <taskdef resource="checkstyletask.properties"
            classpath="${lib.dir}/checkstyle-all-2.4.jar"/>

    <checkstyle>
      <formatter type="plain"/>  <!-- also available: type="xml" -->
      <fileset dir="${build.filter.src.dir}" includes="**/*.java"/>
    </checkstyle>

  </target>


  <target name="doccheck" depends="filter-src"
          description="Reports on javadoc style errors (not working yet)">

    <delete dir="${build.doccheck.dir}"/>
    <mkdir dir="${build.doccheck.dir}"/>

    <javadoc doclet="com.sun.tools.doclets.doccheck.DocCheck"
         docletpath="${lib.dir}/doccheck.jar"
            destdir="${build.doccheck.dir}">
      <packageset dir="${build.filter.src.dir}"/>
    </javadoc>

  </target>


  <target name="docs" depends="filter-src"
          description="Builds javadocs with custom tags to build folder">

    <delete dir="${build.javadocs.dir}"/>
    <mkdir dir="${build.javadocs.dir}"/>

    <javadoc destdir="${build.javadocs.dir}"
                link="http://java.sun.com/j2se/1.4.1/docs/api"
            overview="${src.dir}/intro.html"
              source="${build.docsourcelevel}">

      <tag name="revised" description="Last revised:"/>
      <tag name="spec" description="Specified by:"/>
      <tag name="editor" description="Last edited by:"/>
      <tag name="fixme" description="FIX ME:"/>
      <packageset dir="${build.filter.src.dir}"/>

    </javadoc>

  </target>


  <!--
   # javac -s doesn't reliably generate compilable code. It generates
   # bridge methods (marked as "synthetic") that can have identical
   # signatures to existing methods except for the return value.
   -->
  <target name="strip" depends="init">

    <mkdir dir="${build.stripped.dir}"/>

    <javac srcdir="${src.dir}"
          destdir="${build.stripped.dir}"
            debug="${build.debug}"
       debuglevel="${build.debuglevel}"
      deprecation="${build.deprecation}"
           source="${build.sourcelevel}"
             fork="true">

      <bootclasspath refid="javac.bootclasspath"/>
      <compilerarg line="${javac.args} ${build.warnings.option} -s"/>

    </javac>

  </target>


  <target name="dist" depends="init, dist-clean, dist-jar, dist-docs"
          description="Puts all distributable products in single hierarchy"/>


  <target name="clean"
          description="Removes all build products">

    <delete dir="${build.dir}"/>
    <delete dir="${build.classes.dir}"/>
    <delete dir="${build.lib.dir}"/>

  </target>


  <target name="dist-clean"
          description="Removes all build and distribution products">

    <delete dir="${dist.dir}"/>

  </target>


  <!-- Anthill targets -->

  <!-- Should really run the tests instead of just the jar target -->
  <target name="anthill-build" depends="jar, test, docs, dist-docs"/>

  <target name="anthill-publish">
    <copy todir="${deployDir}/docs/private">
      <fileset dir="${build.javadocs.dir}"/>
    </copy>
    <copy todir="${deployDir}/docs/public">
      <fileset dir="${dist.javadocs.dir}"/>
    </copy>
    <copy tofile="${deployDir}/index.html"
          file="${basedir}/etc/anthill-index.html"/>
    <copy todir="${deployDir}/notes">
      <fileset dir="${basedir}/etc/notes"/>
    </copy>
  </target>


  <!-- Internal targets -->

  <target name="set-warnings-if" if="build.warnings">

    <property name="build.warnings.option" value="-warnunchecked"/>

  </target>


  <target name="set-warnings-unless" unless="build.warnings">

    <property name="build.warnings.option" value=""/>

  </target>


  <target name="init" depends="set-warnings-if, set-warnings-unless">

    <!-- Version is kept in a separate file -->
    <loadfile property="version" srcFile="version.properties"/>
    <echo>Building JSR-166 version ${version}</echo>

  </target>


  <target name="native-jar" depends="compile"
          description="Builds library jar from compiled sources">

    <mkdir dir="${build.lib.dir}"/>

    <jar destfile="${product.jar}">
      <fileset dir="${build.classes.dir}"/>
    </jar>

  </target>


  <target name="compile-emulation" depends="init"
          if="build.emulation"
          description="Compiles emulation sources to build folder">

    <mkdir dir="${build.emulation.dir}"/>

    <javac srcdir="${emulation.src.dir}"
          destdir="${build.emulation.dir}"
            debug="${build.debug}"
       debuglevel="${build.debuglevel}"
      deprecation="${build.deprecation}"
           source="${build.sourcelevel}"
             fork="true">

      <bootclasspath refid="javac.bootclasspath"/>
      <compilerarg line="${javac.args} ${build.warnings.option}"/>

    </javac>

  </target>


  <target name="emulation-jar" depends="native-jar, compile-emulation"
          if="build.emulation">

    <jar destfile="${product.jar}" update="true" duplicate="add">
      <fileset dir="${build.emulation.dir}"/>
    </jar>

  </target>


  <target name="dist-jar" depends="clean, jar">

    <copy file="${product.jar}" todir="${dist.dir}"/>

  </target>


  <target name="dist-docs" depends="filter-src"
          description="Builds javadocs without custom tags to dist folder">

    <delete dir="${dist.javadocs.dir}"/>
    <mkdir dir="${dist.javadocs.dir}"/>

    <javadoc destdir="${dist.javadocs.dir}"
                link="http://java.sun.com/j2se/1.4.1/docs/api"
            overview="${src.dir}/intro.html"
              source="${build.docsourcelevel}">

      <packageset dir="${build.filter.src.dir}"/>

    </javadoc>

  </target>


  <target name="compile-ant-filter" depends="init">

    <mkdir dir="${build.ant.dir}"/>

    <javac srcdir="${ant.src.dir}"
          destdir="${build.ant.dir}"
           source="1.4"
    />

  </target>


  <target name="filter-src" depends="compile-ant-filter">

    <mkdir dir="${build.filter.src.dir}"/>

    <copy todir="${build.filter.src.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
        <exclude name="**/Random.java"/>
        <exclude name="**/Unsafe.java"/>
      </fileset>
      <filterchain>
        <filterreader classname="jsr166.ant.filters.ReplaceFilter"
                      classpath="${build.ant.dir}">
          <!--
           # These arguments are to get rid of angle-bracketed type
           # parameters so that javadoc can run on the result. The
           # following heuristic that seems to work:
           #
           # For all lines not starting with space(s)-asterisk-space(s),
           #   replace <something> with a space, where there may be more
           #   than one right angle bracket at the end, and "something"
           #   must not contain parens or pipes. (This may need some
           #   tweaking.)
           -->
          <param name="notmatching" value="^\s+\*\s.*$"/>
          <param name="pattern" value="&lt;[^|>()]+?>+"/>
          <param name="replacement" value=" "/>
        </filterreader>
        <filterreader classname="jsr166.ant.filters.ReplaceFilter"
                      classpath="${build.ant.dir}">
          <!--
           # These arguments are to uncomment lines beginning with
           # "//@" so that javadoc can see imports that are needed
           # to resolve links but that shouldn't be in the compiled
           # code.
           -->
          <param name="matching" value="^//@.*$"/>
          <param name="pattern" value="^//@"/>
          <param name="replacement" value=""/>
        </filterreader>
      </filterchain>
    </copy>

  </target>


  <target name="compile-tests" depends="jar">

    <mkdir dir="${build.testcases.dir}"/>

    <javac srcdir="${test.src.dir}"
          destdir="${build.testcases.dir}"
            debug="${build.debug}"
       debuglevel="${build.debuglevel}"
      deprecation="${build.deprecation}"
           source="${build.sourcelevel}"
             fork="true">

      <bootclasspath refid="javac.bootclasspath"/>
      <compilerarg line="${javac.args} ${build.warnings.option}"/>
      <classpath refid="test.classpath"/>

    </javac>

  </target>


  <target name="run-tests" depends="compile-tests">

    <!-- May be overridden by user.properties -->
    <property name="testcase" value="*"/>

    <mkdir dir="${build.reports.dir}"/>

    <junit printsummary="true"
             showoutput="true"
          errorProperty="junit.failed"
        failureProperty="junit.failed"
                    dir="${build.reports.dir}"
                   fork="true">

      <jvmarg value="${test.javac.args}"/>

      <formatter type="xml"/>

      <batchtest todir="${build.reports.dir}">
        <fileset dir="${test.src.dir}">
          <include name="**/${testcase}Test.java"/>
        </fileset>
      </batchtest>

    </junit>

  </target>


  <target name="report-tests" depends="run-tests">
    <!-- Sets junit.report.format to frames if Xalan is present,
         otherwise sets it to noframes. -->
    <available property="junit.report.format"
                  value="frames"
              classname="org.apache.xalan.lib.Redirect"
    />
    <property name="junit.report.format" value="noframes"/>

    <junitreport todir="${build.reports.dir}">
      <fileset dir="${build.reports.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report styledir="${stylesheet.dir}"
                format="${junit.report.format}"
                 todir="${build.reports.dir}"
      />
    </junitreport>

    <fail message="Test Cases Failed" if="junit.failed"/>
  </target>


  <target name="check-junit">
    <!-- FIXME: this test isn't specific enough -->
    <available property="junit.available"
               classname="junit.framework.TestCase"/>
    <fail message="Need JUnit 3.8 to run tests" unless="junit.available"/>
  </target>


</project>
